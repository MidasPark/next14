---
description: Node.js and Express.js best practices for backend development
globs: backend/**/*.js, backend/**/*.ts, backend/src/**/*.ts
---

# Node.js 및 Express.js 베스트 프랙티스

## 프로젝트 구조
- 적절한 디렉토리 구조 사용
- 적절한 모듈 구성 구현
- 적절한 미들웨어 구성 사용
- 도메인별로 라우트 구성 유지
- 적절한 에러 처리 구현
- 적절한 설정 관리 사용

## Express 설정
- 적절한 미들웨어 설정 사용
- 적절한 라우팅 구현
- 적절한 에러 처리 사용
- 적절한 보안 미들웨어 구성
- 적절한 검증 구현
- 적절한 정적 파일 서빙 사용

## API 설계
- 적절한 REST 원칙 사용
- 적절한 버전 관리 구현
- 적절한 요청 검증 사용
- 에러를 적절히 처리
- 적절한 응답 형식 구현
- API를 적절히 문서화

## 데이터베이스 통합
- 적절한 ORM/ODM 사용
- 적절한 마이그레이션 구현
- 적절한 연결 풀링 사용
- 적절한 트랜잭션 구현
- 적절한 쿼리 최적화 사용
- 데이터베이스 에러를 적절히 처리

## 인증
- 적절한 JWT 처리 구현
- 적절한 비밀번호 해싱 사용
- 적절한 세션 관리 구현
- 적절한 OAuth 통합 사용
- 적절한 역할 기반 접근 구현
- 인증 에러를 적절히 처리

## 보안
- 적절한 CORS 설정 사용
- 적절한 속도 제한 구현
- 적절한 보안 헤더 사용
- 적절한 입력 검증 구현
- 적절한 암호화 사용
- 보안 취약점을 적절히 처리

## 성능
- 적절한 캐싱 사용
- 적절한 비동기 작업 구현
- 적절한 연결 풀링 사용
- 적절한 로깅 구현
- 적절한 모니터링 사용
- 높은 트래픽을 적절히 처리

## 테스트
- 적절한 단위 테스트 작성
- 적절한 통합 테스트 구현
- 적절한 테스트 러너 사용
- 적절한 모킹 구현
- 에러 시나리오 테스트
- 적절한 테스트 커버리지 사용

## 배포
- 적절한 Docker 설정 사용
- 적절한 CI/CD 구현
- 적절한 환경 변수 사용
- 적절한 로깅 구성
- 적절한 모니터링 구현
- 배포 에러를 적절히 처리

## 베스트 프랙티스
- Node.js 베스트 프랙티스 준수
- 적절한 async/await 사용
- 적절한 에러 처리 구현
- 적절한 로깅 사용
- 프로세스 신호를 적절히 처리
- 코드를 적절히 문서화 
- Implement proper error handling
- Use proper logging
- Handle process signals properly
- Document code properly 