---
description: Guidelines for writing clean, maintainable, and human-readable code. Apply these rules when writing or reviewing code to ensure consistency and quality.
globs: 
---

# 클린 코드 가이드라인

## 매직 넘버 대신 상수
- 하드코딩된 값을 명명된 상수로 대체
- 값의 목적을 설명하는 설명적인 상수명 사용
- 상수를 파일 상단이나 전용 상수 파일에 유지

## 의미 있는 이름
- 변수, 함수, 클래스는 목적을 드러내야 함
- 이름은 왜 존재하는지와 어떻게 사용되는지 설명해야 함
- 보편적으로 이해되지 않는 약어는 피함

## 스마트 주석
- 코드가 무엇을 하는지 주석 달지 말고 - 코드를 자체 문서화하세요
- 주석을 사용해 왜 그런 방식으로 하는지 설명
- API, 복잡한 알고리즘, 명확하지 않은 부작용 문서화

## 단일 책임
- 각 함수는 정확히 한 가지 일만 해야 함
- 함수는 작고 집중적이어야 함
- 함수가 무엇을 하는지 설명하는 주석이 필요하다면 분할해야 함

## DRY (Don't Repeat Yourself)
- 반복되는 코드를 재사용 가능한 함수로 추출
- 적절한 추상화를 통해 공통 로직 공유
- 단일 진실 소스 유지

## 깔끔한 구조
- 관련 코드를 함께 유지
- 논리적 계층 구조로 코드 구성
- 일관된 파일 및 폴더 명명 규칙 사용

## 캡슐화
- 구현 세부사항 숨기기
- 명확한 인터페이스 노출
- 중첩된 조건문을 잘 명명된 함수로 이동

## 코드 품질 유지보수
- 지속적으로 리팩토링
- 기술 부채를 조기에 수정
- 발견한 것보다 더 깔끔하게 코드 남기기

## 테스트
- 버그 수정 전에 테스트 작성
- 테스트를 읽기 쉽고 유지보수 가능하게 유지
- 엣지 케이스와 에러 조건 테스트

## 버전 관리
- 명확한 커밋 메시지 작성
- 작고 집중적인 커밋 만들기
- 의미 있는 브랜치명 사용 
## Version Control
- Write clear commit messages
- Make small, focused commits
- Use meaningful branch names 