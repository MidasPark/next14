---
description: Next.js with TypeScript and Tailwind UI best practices
globs: frontend/**/*.tsx, frontend/**/*.ts, frontend/src/**/*.ts, frontend/src/**/*.tsx
---


# Next.js 베스트 프랙티스

## 프로젝트 구조
- App Router 디렉토리 구조 사용
- 라우트별 컴포넌트는 `app` 디렉토리에 배치
- 공유 컴포넌트는 `components` 디렉토리에 배치
- 유틸리티와 헬퍼는 `lib` 디렉토리에 배치
- 디렉토리는 소문자와 대시 사용 (예: `components/auth-wizard`)

## 컴포넌트
- 기본적으로 서버 컴포넌트 사용
- 클라이언트 컴포넌트는 'use client'로 명시적 표시
- 클라이언트 컴포넌트를 Suspense로 감싸고 폴백 제공
- 중요하지 않은 컴포넌트는 동적 로딩 사용
- 적절한 에러 바운더리 구현
- 정적 콘텐츠와 인터페이스를 파일 끝에 배치

## 성능
- 이미지 최적화: WebP 형식, 크기 데이터, 지연 로딩 사용
- 'useEffect'와 'setState' 사용 최소화
- 가능한 경우 서버 컴포넌트(RSC) 선호
- 중요하지 않은 컴포넌트는 동적 로딩 사용
- 적절한 캐싱 전략 구현

## 데이터 페칭
- 가능한 경우 서버 컴포넌트로 데이터 페칭
- 데이터 페칭에 대한 적절한 에러 처리 구현
- 적절한 캐싱 전략 사용
- 로딩 및 에러 상태를 적절히 처리

## 라우팅
- App Router 규칙 사용
- 라우트에 대한 적절한 로딩 및 에러 상태 구현
- 동적 라우트를 적절히 사용
- 필요시 병렬 라우트 처리

## 폼 및 검증
- 폼 검증에 Zod 사용
- 적절한 서버 사이드 검증 구현
- 폼 에러를 적절히 처리
- 폼 제출 중 로딩 상태 표시

## 상태 관리
- 클라이언트 사이드 상태 최소화
- React Context를 절약해서 사용
- 가능한 경우 서버 상태 선호
- 적절한 로딩 상태 구현 
- Minimize client-side state
- Use React Context sparingly
- Prefer server state when possible
- Implement proper loading states 