---
description: Tailwind CSS and UI component best practices for modern web applications
globs: frontend/**/*.css, frontend/**/*.tsx, frontend/**/*.jsx, tailwind.config.js, tailwind.config.ts
---

# Tailwind CSS 베스트 프랙티스

## 프로젝트 설정
- 적절한 Tailwind 설정 사용
- 테마 확장을 올바르게 구성
- 적절한 purge 설정 구성
- 적절한 플러그인 통합 사용
- 커스텀 간격과 브레이크포인트 구성
- 적절한 색상 팔레트 설정

## 컴포넌트 스타일링
- 커스텀 CSS보다 유틸리티 클래스 사용
- 필요시 @apply로 관련 유틸리티 그룹화
- 적절한 반응형 디자인 유틸리티 사용
- 다크 모드를 올바르게 구현
- 적절한 상태 변형 사용
- 컴포넌트 스타일 일관성 유지

## 레이아웃
- Flexbox와 Grid 유틸리티를 효과적으로 사용
- 적절한 간격 시스템 구현
- 필요시 컨테이너 쿼리 사용
- 적절한 반응형 브레이크포인트 구현
- 적절한 패딩과 마진 유틸리티 사용
- 적절한 정렬 유틸리티 구현

## 타이포그래피
- 적절한 폰트 크기 유틸리티 사용
- 적절한 줄 높이 구현
- 적절한 폰트 무게 유틸리티 사용
- 커스텀 폰트를 올바르게 구성
- 적절한 텍스트 정렬 사용
- 적절한 텍스트 장식 구현

## 색상
- 의미론적 색상 명명 사용
- 적절한 색상 대비 구현
- 투명도 유틸리티를 효과적으로 사용
- 커스텀 색상을 올바르게 구성
- 적절한 그라디언트 유틸리티 사용
- 적절한 호버 상태 구현

## 컴포넌트
- 가능한 경우 shadcn/ui 컴포넌트 사용
- 컴포넌트를 올바르게 확장
- 컴포넌트 변형 일관성 유지
- 적절한 애니메이션 구현
- 적절한 전환 유틸리티 사용
- 접근성을 고려

## 반응형 디자인
- 모바일 우선 접근법 사용
- 적절한 브레이크포인트 구현
- 컨테이너 쿼리를 효과적으로 사용
- 다양한 화면 크기를 적절히 처리
- 적절한 반응형 타이포그래피 구현
- 적절한 반응형 간격 사용

## 성능
- 적절한 purge 구성 사용
- 커스텀 CSS 최소화
- 적절한 캐싱 전략 사용
- 적절한 코드 분할 구현
- 프로덕션 최적화
- 번들 크기 모니터링

## 베스트 프랙티스
- 명명 규칙 준수
- 스타일을 체계적으로 유지
- 적절한 문서화 사용
- 적절한 테스트 구현
- 접근성 가이드라인 준수
- 적절한 버전 관리 사용 
- Use proper documentation
- Implement proper testing
- Follow accessibility guidelines
- Use proper version control 